openapi: 3.0.0
info:
  title: 'API Bilemo'
  version: '0.1'
servers:
  -
    url: 'http://localhost:8000/doc'
    description: 'API for Bilemo''s Project'
paths:
  /users/{user}/customers:
    get:
      summary: "Liste des clients"
      responses:
        '200':
          description: 'Liste des clients'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
        '404':
          description: 'La page demandée n''existe pas'
        '401':
          description: "Jeton d'authentification invalide"
        '403':
          description: "L'accès à cette page ne vous est pas autorisé"
      security:
        - scalar: bearer
    post:
      summary: "Création d'un client"
      description: "Création d'un client"
      operationId: "addCustomer"
      parameters:
        - name: "body"
          in: "body"
          description: "nom du client"
          requirer: true
          schema:
            $ref: '#/components/schemas/Customer'
      responses:
        '201':
          description: "Création d'un client"
      security:
        - scalar: bearer

  '/users/{userId}/customers/{customerId}':
    delete:
      summary: "Suppression d'un client"
      parameters:
        -
          name: id
          in: path
          description: 'ID du client'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 'Suppression d''un client'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '404':
          description: 'La ressource n''existe pas'
        '401':
          description: 'Jeton d''authentification invalide'
        '403':
          description: 'L''accès à cette page ne vous est pas autorisé'
      security:
        -
          scalar: bearer
  '/users/{user}/customers/{customerId}':
    get:
      summary: "Détail du client"
      parameters:
        -
          name: id
          in: path
          description: 'ID du client'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Détails du client'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '404':
          description: 'La ressource n''existe pas'
        '401':
          description: 'Jeton d''authentification invalide'
        '403':
          description: 'L''accès à cette page ne vous est pas autorisé'
      security:
        -
          scalar: bearer
  '/phones/{id}':
    get:
      summary: "Détail du téléphone"
      parameters:
        -
          name: id
          in: path
          description: 'ID du mobile'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Détails d''un mobile'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Phone'
        '404':
          description: 'Le mobile n''existe pas'
        '401':
          description: 'Jeton d''authentification invalide'
      security:
        -
          scalar: bearer
  /phones:
    get:
      summary: "Liste des téléphones"
      responses:
        '200':
          description: 'Liste des mobiles'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Phone'
        '404':
          description: 'Le mobile n''existe pas'
        '401':
          description: 'Jeton d''authentification invalide'
        '403':
          description: 'L''accès à cette page ne vous est pas autorisé'
      security:
        - scalar: bearer
components:
  schemas:
    Customer:
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        password:
          type: string
        phones:
          type: string
      type: object
    Phone:
      properties:
        id:
          type: integer
        brand:
          type: string
        name:
          type: string
        price:
          type: integer
        description:
          type: string
        color:
          type: string
      type: object
    User:
      properties:
        id:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        createdAt:
          type: string
          format: date-time
      type: object
  securitySchemes:
    bearer:
      type: apiKey
      name: bearer
      in: header
      bearerFormat: JWT
